/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Comments as PrismaComments,
  Airdrops as PrismaAirdrops,
  User as PrismaUser,
} from "@prisma/client";

export class CommentsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.CommentsCountArgs, "select">): Promise<number> {
    return this.prisma.comments.count(args);
  }

  async commentsItems(
    args: Prisma.CommentsFindManyArgs
  ): Promise<PrismaComments[]> {
    return this.prisma.comments.findMany(args);
  }
  async comments(
    args: Prisma.CommentsFindUniqueArgs
  ): Promise<PrismaComments | null> {
    return this.prisma.comments.findUnique(args);
  }
  async createComments(
    args: Prisma.CommentsCreateArgs
  ): Promise<PrismaComments> {
    return this.prisma.comments.create(args);
  }
  async updateComments(
    args: Prisma.CommentsUpdateArgs
  ): Promise<PrismaComments> {
    return this.prisma.comments.update(args);
  }
  async deleteComments(
    args: Prisma.CommentsDeleteArgs
  ): Promise<PrismaComments> {
    return this.prisma.comments.delete(args);
  }

  async getAirdrop(parentId: string): Promise<PrismaAirdrops | null> {
    return this.prisma.comments
      .findUnique({
        where: { id: parentId },
      })
      .airdrop();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.comments
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
