/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Airdrops as PrismaAirdrops,
  Comments as PrismaComments,
} from "@prisma/client";

export class AirdropsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.AirdropsCountArgs, "select">): Promise<number> {
    return this.prisma.airdrops.count(args);
  }

  async airdropsItems(
    args: Prisma.AirdropsFindManyArgs
  ): Promise<PrismaAirdrops[]> {
    return this.prisma.airdrops.findMany(args);
  }
  async airdrops(
    args: Prisma.AirdropsFindUniqueArgs
  ): Promise<PrismaAirdrops | null> {
    return this.prisma.airdrops.findUnique(args);
  }
  async createAirdrops(
    args: Prisma.AirdropsCreateArgs
  ): Promise<PrismaAirdrops> {
    return this.prisma.airdrops.create(args);
  }
  async updateAirdrops(
    args: Prisma.AirdropsUpdateArgs
  ): Promise<PrismaAirdrops> {
    return this.prisma.airdrops.update(args);
  }
  async deleteAirdrops(
    args: Prisma.AirdropsDeleteArgs
  ): Promise<PrismaAirdrops> {
    return this.prisma.airdrops.delete(args);
  }

  async findCommentsItems(
    parentId: string,
    args: Prisma.CommentsFindManyArgs
  ): Promise<PrismaComments[]> {
    return this.prisma.airdrops
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .commentsItems(args);
  }
}
