/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Notifications as PrismaNotifications,
  User as PrismaUser,
} from "@prisma/client";

export class NotificationsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.NotificationsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.notifications.count(args);
  }

  async notificationsItems(
    args: Prisma.NotificationsFindManyArgs
  ): Promise<PrismaNotifications[]> {
    return this.prisma.notifications.findMany(args);
  }
  async notifications(
    args: Prisma.NotificationsFindUniqueArgs
  ): Promise<PrismaNotifications | null> {
    return this.prisma.notifications.findUnique(args);
  }
  async createNotifications(
    args: Prisma.NotificationsCreateArgs
  ): Promise<PrismaNotifications> {
    return this.prisma.notifications.create(args);
  }
  async updateNotifications(
    args: Prisma.NotificationsUpdateArgs
  ): Promise<PrismaNotifications> {
    return this.prisma.notifications.update(args);
  }
  async deleteNotifications(
    args: Prisma.NotificationsDeleteArgs
  ): Promise<PrismaNotifications> {
    return this.prisma.notifications.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.notifications
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
